##
# Nginx server config
#
# This config took the default config provided in the Nginx Docker image and
# amended it based on existing WEX Nginx config, plus notes taken from the
# following sites
#
# - https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration
# - https://www.netguru.com/codestories/nginx-tutorial-performance

# On and set by default.
# The worker_process directive defines how many workers should be run. The
# safest setting is to use the number of cores by passing `auto`.
worker_processes auto;

# On and set by default.
error_log  /var/log/nginx/error.log warn;
# On and set by default.
pid        /var/run/nginx.pid;

events {
    # On and set by default.
    # Specifies how many connections can be opened by a worker process at the
    # same time. Articles seem to have a consensus that 1024 is a safe default
    worker_connections  1024;
}

http {
    # Called and set by default.
    include       /etc/nginx/mime.types;
    # On and set by default.
    default_type  application/octet-stream;

    # On and set by default.
    # Log format and the name for it e.g. `main`. When you then specify an
    # access_log you also provide a name for the format to use (see access_log
    #Â below)
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    # On and set by default.
    # If you actually exec into the running Nginx Docker container
    # `/var/log/nginx/access.log` is actually a symlink to `/dev/stdout`. The
    # same goes for `/var/log/nginx/error.log` -> `/dev/stderr`
    access_log  /var/log/nginx/access.log  main;

    # Some options were already set by default in the file. After referencing
    # our existing content our reference articles, we have also set some others.
    #
    # If all 3 directives are turned on, nginx will:
    # - ensure packages are full before sending them to the client
    # - for the last packet, tcp_nopush will be removed, allowing TCP to send it
    #   immediately, without a 200ms delay
    #
    # On by default.
    # Tell Nginx to use sendfile which is an quicker way of grabbing a file for
    # sending across the network
    sendfile on;
    # Instead of pushing packages as fast as possible, it aims to optimise the
    # amount of data sent simultaneously. It will force the package to wait
    # until it gets its maximum size (MSS) before sending it to the client.
    # This directive only works, when sendfile is on.
    tcp_nopush on;
    # Essentially provides a 200 ms gain when enabled.
    tcp_nodelay on;

    # On and set by default to 65.
    # The TCP protocol, on which HTTP is based, requires performing a three-way
    # handshake to initiate the connection. It means that before the server can
    # send you data (e.g. images), three full roundtrips between the client and
    # the server need to be made. For another request, you will have to perform
    # this whole initialisation once again.
    # When this option is set after the successful response, it keeps the
    # connection idle for a given amount of time. If another request is made
    # during this time, the existing connection will be reused and the idle time
    # refreshed.
    keepalive_timeout 65;

    # Off by default and normally commented out, we explicitly disable it. This
    # is based on current config. It's disabled because it keeps getting
    # highlighted in PEN tests when enabled as a vulnerability (BREACH).
    # See http://breachattack.com.
    # We still benefit from gzip compression on our assets. In default.conf
    # our assets location enables the `gzip_static` directive. This means if
    # there is a `*.gz` version of an asset Nginx will return that instead. And
    # Rails asset generation always creates a .gz version so we are good to go!
    gzip off;

    # Disables emitting nginx version on error pages and in the "Server"
    # response header field. This also is commonly noted during PEN tests if
    # not disabled.
    server_tokens off;

    include /etc/nginx/conf.d/*.conf;
}
